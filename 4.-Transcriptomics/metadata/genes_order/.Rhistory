colnames(DS04_15)<- c("number_reads", "name_gen")
colnames(HC01_15)<- c("number_reads", "name_gen")
colnames(HC02_15)<- c("number_reads", "name_gen")
colnames(HC03_15)<- c("number_reads", "name_gen")
colnames(HC04_15)<- c("number_reads", "name_gen")
colnames(HC05_15)<- c("number_reads", "name_gen")
colnames(HS01_15)<- c("number_reads", "name_gen")
colnames(HS02_15)<- c("number_reads", "name_gen")
colnames(HS05_15)<- c("number_reads", "name_gen")
colnames(HC01_17)<- c("number_reads", "name_gen")
colnames(DC04_17)<- c("number_reads", "name_gen")
head(DC04_17)
all<- data.frame(DC01_15$name_gen, DC01_15$number_reads)
head(all)
all$DC_2 <- DC02_15$number_reads[match(all$DC01_15.name_gen, DC02_15$name_gen)]
all$DC_3 <- DC03_15$number_reads[match(all$DC01_15.name_gen, DC03_15$name_gen)]
all$DC_4 <- DC04_15$number_reads[match(all$DC01_15.name_gen, DC04_15$name_gen)]
all$DC_5 <- DC05_15$number_reads[match(all$DC01_15.name_gen, DC05_15$name_gen)]
all$DS_1 <- DS01_15$number_reads[match(all$DC01_15.name_gen, DS01_15$name_gen)]
all$DS_2 <- DS02_15$number_reads[match(all$DC01_15.name_gen, DS02_15$name_gen)]
all$DS_4 <- DS04_15$number_reads[match(all$DC01_15.name_gen, DS04_15$name_gen)]
all$HC_1 <- HC01_15$number_reads[match(all$DC01_15.name_gen, HC01_15$name_gen)]
all$HC_2 <- HC02_15$number_reads[match(all$DC01_15.name_gen, HC02_15$name_gen)]
all$HC_3 <- HC03_15$number_reads[match(all$DC01_15.name_gen, HC03_15$name_gen)]
all$HC_4 <- HC04_15$number_reads[match(all$DC01_15.name_gen, HC04_15$name_gen)]
all$HC_5 <- HC05_15$number_reads[match(all$DC01_15.name_gen, HC05_15$name_gen)]
all$HS_1 <- HS01_15$number_reads[match(all$DC01_15.name_gen, HS01_15$name_gen)]
all$HS_2 <- HS02_15$number_reads[match(all$DC01_15.name_gen, HS02_15$name_gen)]
all$HS_5 <- HS05_15$number_reads[match(all$DC01_15.name_gen, HS05_15$name_gen)]
all$HC17 <- HC01_17$number_reads[match(all$DC01_15.name_gen, HC01_17$name_gen)]
all$DC47 <- DC04_17$number_reads[match(all$DC01_15.name_gen, DC04_17$name_gen)]
all$DC47 <- DC04_17$number_reads[match(all$DC01_15.name_gen, DC04_17$name_gen)]
head(all)
all$DC_2 <- DC02_15$number_reads[match(all$DC01_15.name_gen, DC02_15$name_gen)]
all$DC_3 <- DC03_15$number_reads[match(all$DC01_15.name_gen, DC03_15$name_gen)]
all$DC_4 <- DC04_15$number_reads[match(all$DC01_15.name_gen, DC04_15$name_gen)]
all$DC_5 <- DC05_15$number_reads[match(all$DC01_15.name_gen, DC05_15$name_gen)]
all$DS_1 <- DS01_15$number_reads[match(all$DC01_15.name_gen, DS01_15$name_gen)]
all$DS_2 <- DS02_15$number_reads[match(all$DC01_15.name_gen, DS02_15$name_gen)]
all$DS_4 <- DS04_15$number_reads[match(all$DC01_15.name_gen, DS04_15$name_gen)]
all$TC_1 <- HC01_15$number_reads[match(all$DC01_15.name_gen, HC01_15$name_gen)]
all$TC_2 <- HC02_15$number_reads[match(all$DC01_15.name_gen, HC02_15$name_gen)]
all$TC_3 <- HC03_15$number_reads[match(all$DC01_15.name_gen, HC03_15$name_gen)]
all$TC_4 <- HC04_15$number_reads[match(all$DC01_15.name_gen, HC04_15$name_gen)]
all$TC_5 <- HC05_15$number_reads[match(all$DC01_15.name_gen, HC05_15$name_gen)]
all$TS_1 <- HS01_15$number_reads[match(all$DC01_15.name_gen, HS01_15$name_gen)]
all$TS_2 <- HS02_15$number_reads[match(all$DC01_15.name_gen, HS02_15$name_gen)]
all$TS_5 <- HS05_15$number_reads[match(all$DC01_15.name_gen, HS05_15$name_gen)]
all$TC17 <- HC01_17$number_reads[match(all$DC01_15.name_gen, HC01_17$name_gen)]
all$DC47 <- DC04_17$number_reads[match(all$DC01_15.name_gen, DC04_17$name_gen)]
head(all)
DC01_15<-read.delim("../../metadata/genes_order/DC01_15_sw10L50.genesorder.txt", header= FALSE)
DC02_15<-read.delim("../../metadata/genes_order/DC02_15_sw10L50.genesorder.txt", header= FALSE)
DC03_15<-read.delim("../../metadata/genes_order/DC03_15_sw10L50.genesorder.txt", header= FALSE)
DC04_15<-read.delim("../../metadata/genes_order/DC04_15_sw10L50.genesorder.txt", header= FALSE)
DC05_15<-read.delim("../../metadata/genes_order/DC05_15_sw10L50.genesorder.txt", header= FALSE)
DS01_15<-read.delim("../../metadata/genes_order/DS01_15_sw10L50.genesorder.txt", header= FALSE)
DS02_15<-read.delim("../../metadata/genes_order/DS02_15_sw10L50.genesorder.txt", header= FALSE)
DS04_15<-read.delim("../../metadata/genes_order/DS04_15_sw10L50.genesorder.txt", header= FALSE)
HC01_15<-read.delim("../../metadata/genes_order/SC01_15_sw10L50.genesorder.txt", header= FALSE)
HC02_15<-read.delim("../../metadata/genes_order/SC02_15_sw10L50.genesorder.txt", header= FALSE)
HC03_15<-read.delim("../../metadata/genes_order/SC03_15_sw10L50.genesorder.txt", header= FALSE)
HC04_15<-read.delim("../../metadata/genes_order/SC04_15_sw10L50.genesorder.txt", header= FALSE)
HC05_15<-read.delim("../../metadata/genes_order/SC05_15_sw10L50.genesorder.txt", header= FALSE)
HS01_15<-read.delim("../../metadata/genes_order/SS01_15_sw10L50.genesorder.txt", header= FALSE)
HS02_15<-read.delim("../../metadata/genes_order/SS02_15_sw10L50.genesorder.txt", header= FALSE)
HS05_15<-read.delim("../../metadata/genes_order/SS05_15_sw10L50.genesorder.txt", header= FALSE)
HC01_17<-read.delim("../../metadata/genes_order/SC01_17_sw10L50.genesorder.txt", header= FALSE)
DC04_17<-read.delim("../../metadata/genes_order/DC04_17_sw10L50.genesorder.txt", header= FALSE)
head(DC04_17)
# Change columns nameÂ´s
colnames(DC01_15)<- c("number_reads", "name_gen")
colnames(DC02_15)<- c("number_reads", "name_gen")
colnames(DC03_15)<- c("number_reads", "name_gen")
colnames(DC04_15)<- c("number_reads", "name_gen")
colnames(DC05_15)<- c("number_reads", "name_gen")
colnames(DS01_15)<- c("number_reads", "name_gen")
colnames(DS02_15)<- c("number_reads", "name_gen")
colnames(DS04_15)<- c("number_reads", "name_gen")
colnames(HC01_15)<- c("number_reads", "name_gen")
colnames(HC02_15)<- c("number_reads", "name_gen")
colnames(HC03_15)<- c("number_reads", "name_gen")
colnames(HC04_15)<- c("number_reads", "name_gen")
colnames(HC05_15)<- c("number_reads", "name_gen")
colnames(HS01_15)<- c("number_reads", "name_gen")
colnames(HS02_15)<- c("number_reads", "name_gen")
colnames(HS05_15)<- c("number_reads", "name_gen")
colnames(HC01_17)<- c("number_reads", "name_gen")
colnames(DC04_17)<- c("number_reads", "name_gen")
head(DC04_17)
all<- data.frame(DC01_15$name_gen, DC01_15$number_reads)
head(all)
all$DC_2 <- DC02_15$number_reads[match(all$DC01_15.name_gen, DC02_15$name_gen)]
all$DC_3 <- DC03_15$number_reads[match(all$DC01_15.name_gen, DC03_15$name_gen)]
all$DC_4 <- DC04_15$number_reads[match(all$DC01_15.name_gen, DC04_15$name_gen)]
all$DC_5 <- DC05_15$number_reads[match(all$DC01_15.name_gen, DC05_15$name_gen)]
all$DS_1 <- DS01_15$number_reads[match(all$DC01_15.name_gen, DS01_15$name_gen)]
all$DS_2 <- DS02_15$number_reads[match(all$DC01_15.name_gen, DS02_15$name_gen)]
all$DS_4 <- DS04_15$number_reads[match(all$DC01_15.name_gen, DS04_15$name_gen)]
all$TC_1 <- HC01_15$number_reads[match(all$DC01_15.name_gen, HC01_15$name_gen)]
all$TC_2 <- HC02_15$number_reads[match(all$DC01_15.name_gen, HC02_15$name_gen)]
all$TC_3 <- HC03_15$number_reads[match(all$DC01_15.name_gen, HC03_15$name_gen)]
all$TC_4 <- HC04_15$number_reads[match(all$DC01_15.name_gen, HC04_15$name_gen)]
all$TC_5 <- HC05_15$number_reads[match(all$DC01_15.name_gen, HC05_15$name_gen)]
all$TS_1 <- HS01_15$number_reads[match(all$DC01_15.name_gen, HS01_15$name_gen)]
all$TS_2 <- HS02_15$number_reads[match(all$DC01_15.name_gen, HS02_15$name_gen)]
all$TS_5 <- HS05_15$number_reads[match(all$DC01_15.name_gen, HS05_15$name_gen)]
all$TC17 <- HC01_17$number_reads[match(all$DC01_15.name_gen, HC01_17$name_gen)]
all$DC47 <- DC04_17$number_reads[match(all$DC01_15.name_gen, DC04_17$name_gen)]
head(all)
colnames(all)[1]<- ""
colnames(all)[2]<- "DC_1"
head(all)
all<- as.data.frame(all, na.rm=TRUE)
all[is.na(all)]<- 0
#Remove no match
all<- all[-(1),]
sum(all$DC_1)
sum(all$DC_2)
sum(all$DC_3)
sum(all$DC_4)
sum(all$DC_5)
sum(all$DS_1)
sum(all$DS_2)
sum(all$DS_4)
sum(all$TC_1)
sum(all$TC_2)
sum(all$TC_3)
sum(all$TC_4)
sum(all$TC_5)
sum(all$TS_1)
sum(all$TS_2)
sum(all$TS_5)
# Count genes with 0 reads
nrow(all[all$DC_1 == 0,])
nrow(all[all$DC_2 == 0,])
nrow(all[all$DC_3 == 0,])
nrow(all[all$DC_4 == 0,])
nrow(all[all$DC_5 == 0,])
nrow(all[all$DS_1 == 0,])
nrow(all[all$DS_2 == 0,])
nrow(all[all$DS_4 == 0,])
nrow(all[all$TC_1 == 0,])
nrow(all[all$TC_2 == 0,])
nrow(all[all$TC_3 == 0,])
nrow(all[all$TC_4 == 0,])
nrow(all[all$TC_5 == 0,])
nrow(all[all$TS_1 == 0,])
nrow(all[all$TS_2 == 0,])
nrow(all[all$TS_5 == 0,])
# Export table to .txt format
write.table(all, file="../../metadata/all_genes/allreadsgenes.txt", sep = "\t", eol = "\n", dec = ".",
row.names = TRUE, col.names = TRUE)
View(all)
# Load libraries
library(limma)
library(edgeR)
library(DESeq2)
library(ggbiplot)
library (ggplot2)
# Load data. Count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
View(alldata)
View(alldata)
alldata <- as.data.frame(alldata)
# Load data. Count table
alldata <-as.data.frame(read.delim("../../metadata/all_genes/allreadsgenes.txt"))
# Load count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
# Convert dataframe to data matrix
alldata_m<-alldata_df
rownames(alldata_m)<-alldata_df[,1] # Add rownames
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
tratamiento <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
label <- c("DC_1", "DC_2","DC_3","DC_4","DC_5",
"TC_1","TC_2","TC_3","TC_4","TC_5")
# Select subset data(descart data)
DCvsTC<- subset(alldata, select = -c(DS_1, DS_2, DS_4,
TS_1, TS_2, TS_5,
TC17, DC47))
tratamiento <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
label <- c("DC_1", "DC_2","DC_3","DC_4","DC_5",
"TC_1","TC_2","TC_3","TC_4","TC_5")
samples <-c("DC1", "DC2","DC3","DC4","DC5",
"TC1","TC2","TC3","TC4","TC5")
# Load count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
# Select subset data(descart data)
DCvsTC<- subset(alldata, select = -c(DS_1, DS_2, DS_4,
TS_1, TS_2, TS_5,
TC17, DC47))
treatment <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
treatment <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
label <- c("DC_1", "DC_2","DC_3","DC_4","DC_5",
"TC_1","TC_2","TC_3","TC_4","TC_5")
samples <-c("DC1", "DC2","DC3","DC4","DC5",
"TC1","TC2","TC3","TC4","TC5")
targets <- data.frame(treatment,label,samples)
rownames(targets) <- label
targets
# Filtering genes
table(rowSums(DCvsTC)==0)
suma <- rowSums(DCvsTC)
filtconteos <- DCvsTC[suma != 0,]
dim(filtconteos)
head(filtconteos)
# Filtering genes
table(rowSums(DCvsTC)==0)
suma <- rowSums(DCvsTC)
filtconteos <- DCvsTC[suma != 0,]
dim(filtconteos)
head(filtconteos)
##################################################################################################################
# EdgeR
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:10], group = targets$treatment) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS DCvsHC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV DCvsHC")
## Test
et <- exactTest(d,pair=c("HC","DC"))
## Test
et <- exactTest(d,pair=c("TC","DC"))
hist(top$table$FDR, breaks = 100, main = "Hist FDR DCvsTC")
## Test
et <- exactTest(d,pair=c("TC","DC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR DCvsTC")
abline(v=0.05, col="red",lwd=3)
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~tratamiento)
##################################################################################################################
# DESeq2
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~treatment)
### Test
dds <- DESeq(dds)
head(dds)
res <- results(dds)
head (res)
#edgeR
d$samples$norm.factors #edgeR
### Normalizacion de ambos datos
#edgeR
d$samples$norm.factors #edgeR
#DESeq2
sizeFactors(dds) #DESeq2
### Compareted dispersion values
# edgeR
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# DESeq2
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
# edgeR
head (topTags(et, n= Inf))
# DESeq2
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
# edgeR
head (topTags(et, n= Inf))
# DESeq2
res[rownames(topTags(et, n= Inf)),]
# Load count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
# Select subset data(descart data)
DCvsTC<- subset(alldata, select = -c(DS_1, DS_2, DS_4,
TS_1, TS_2, TS_5,
TC17, DC47))
treatment <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
label <- c("DC_1", "DC_2","DC_3","DC_4","DC_5",
"TC_1","TC_2","TC_3","TC_4","TC_5")
samples <-c("DC1", "DC2","DC3","DC4","DC5",
"TC1","TC2","TC3","TC4","TC5")
targets <- data.frame(treatment,label,samples)
rownames(targets) <- label
targets
# Filtering genes
table(rowSums(DCvsTC)==0)
suma <- rowSums(DCvsTC)
filtconteos <- DCvsTC[suma != 0,]
dim(filtconteos)
head(filtconteos)
##################################################################################################################
# EdgeR
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:10], group = targets$treatment) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS DCvsHC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV DCvsTC")
## Test
et <- exactTest(d,pair=c("TC","DC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR DCvsTC")
abline(v=0.05, col="red",lwd=3)
##################################################################################################################
# DESeq2
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~treatment)
### Test
dds <- DESeq(dds)
head(dds)
res <- results(dds)
head (res)
### Normalizacion de ambos datos
# edgeR
d$samples$norm.factors #edgeR
# DESeq2
sizeFactors(dds) #DESeq2
### Compareted dispersion values
# edgeR
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# DESeq2
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
# edgeR
head (topTags(et, n= Inf))
# DESeq2
res[rownames(topTags(et, n= Inf)),]
#Plot Log fold change
# edgeR
########p.value=0.1
de <- decideTestsDGE(et, adjust.method = "fdr" )
head(de)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
#Plot Log fold change
# edgeR
########p.value=0.1
de <- decideTestsDGE(et, adjust.method = "fdr" )
head(de)
detags <- rownames(d)[as.logical(de)]
plotSmear(et, de.tags=detags, main="plotSmear de edgeR") > abline(h=0, col="red", lwd=3)
# DESeq2
plotMA(res, main="MA-plot DESeq2", ylim=c(-5,5))
### Sort the genes according to the attached p-value they have obtained
# edgeR
topSig <- top[top$table$FDR < 0.05, ]
dim(topSig)
head(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_0.05.txt", sep="\t", row.names=T)
# DESeq2
# Sort by p-valores
resOrdered <- res[order(res$padj),]
# Only DEG
xx <-res[order(res$padj,na.last=NA),]
head(xx)
resSig2 <- xx[xx$padj < 0.05, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
genesDEDESeq2
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HvsD170ppb_FDR_0.05.txt", sep="\t", row.names=T)
### Sort the genes according to the attached p-value they have obtained
# EdgeR
topSig <- top[top$table$FDR < 5, ]
dim(topSig)
genesDEedgeR <- rownames(topSig)
head(genesDEedgeR)
topSig_export<-topSig
topSig_export$ID<-genesDEedgeR
head(topSig_export)
write.table(topSig_export, "../../metadata/DGE/EdgeR_HvsD170ppb_FDR_5.txt", sep="\t", row.names=T)
# DESeq2
xx <-res[order(res$padj,na.last=NA),]
resSig2 <- xx[xx$padj < 5, ]
dim(resSig2)
head(resSig2)
genesDEDESeq2 <- rownames(resSig2)
head(resSig2)
resSig2_export<-resSig2
resSig2_export$ID<-resSig2_export
head(resSig2_export)
write.table(resSig2_export, "../../metadata/DGE/DESeq2_HvsD170ppb_FDR_5.txt", sep="\t", row.names=T)
### How many common DE genes exist edgeR vs DESeq2
genesDEcomunes <- intersect(genesDEedgeR,genesDEDESeq2)
head(genesDEcomunes)
str(genesDEcomunes)
# Load count table
alldata <-read.delim("../../metadata/all_genes/allreadsgenes.txt")
# Convert dataframe to data matrix
x<-alldata
rownames(x)<-alldata[,1] # Add rownames
x<-x[ ,2:ncol(x)] # Remove double col with names
alldata<-as.matrix(x)
# Select subset data(descart data)
DCvsTC<- subset(alldata, select = -c(DS_1, DS_2, DS_4,
TS_1, TS_2, TS_5,
TC17, DC47))
treatment <- c("DC","DC","DC","DC","DC",
"TC","TC","TC","TC","TC")
label <- c("DC_1", "DC_2","DC_3","DC_4","DC_5",
"TC_1","TC_2","TC_3","TC_4","TC_5")
samples <-c("DC1", "DC2","DC3","DC4","DC5",
"TC1","TC2","TC3","TC4","TC5")
targets <- data.frame(treatment,label,samples)
rownames(targets) <- label
targets
# Filtering genes
table(rowSums(DCvsTC)==0)
suma <- rowSums(DCvsTC)
filtconteos <- DCvsTC[suma != 0,]
dim(filtconteos)
head(filtconteos)
##################################################################################################################
# EdgeR
## Clase DGEList
d <- DGEList(counts = filtconteos[,1:10], group = targets$treatment) ## Normalization
colnames(d) <- targets$label
## Normalization
d <- calcNormFactors(d)
plotMDS(d, main="plotMDS DCvsHC")
## Dispersors stimation
d <- estimateCommonDisp(d,verbose=TRUE)
d <- estimateTagwiseDisp(d)
plotBCV(d, main="plotBCV DCvsTC")
## Test
et <- exactTest(d,pair=c("TC","DC"))
top<- topTags(et, n= Inf)
hist(top$table$FDR, breaks = 100, main = "Hist FDR DCvsTC")
abline(v=0.05, col="red",lwd=3)
##################################################################################################################
# DESeq2
### Class DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData=filtconteos, colData= targets, design=~treatment)
### Test
dds <- DESeq(dds)
head(dds)
res <- results(dds)
head (res)
### Normalizacion de ambos datos
# edgeR
d$samples$norm.factors #edgeR
# DESeq2
sizeFactors(dds) #DESeq2
### Compareted dispersion values
# edgeR
# First calculated comun disspersion
d$common.dispersion
# Second gen to gen dispersion of comun dispersion
head(d$tagwise.dispersion)
# DESeq2
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# DESeq2
# First calculated stimation gen to gen
head(mcols(dds)$dispGeneEs)
# Then through an adjustment with the average counts estimate the dispersion
head(mcols(dds)$dispersion)
#Compare the tests, that is, the p-values and other results that each packet has calculated for each gene
# edgeR
head (topTags(et, n= Inf))
# DESeq2
res[rownames(topTags(et, n= Inf)),]
View(alldata)
